# Can you design a learnable positional encoding method using pytorch? (Create dummy dataset)

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset

class DummyDataset(Dataset):
    def __init__(self, num_sequences, sequence_length, embedding_dim):
        self.data = torch.randn(num_sequences, sequence_length, embedding_dim)
        
    def __len__(self):
        return len(self.data)
    
    def __getitem__(self, idx):
        return self.data[idx]

num_sequences = 1000
sequence_length = 10
embedding_dim = 64
dummy_data = DummyDataset(num_sequences, sequence_length, embedding_dim)
dataloader = DataLoader(dummy_data, batch_size=32, shuffle=True)


class LearnablePositionalEncoding(nn.Module):
    def __init__(self, max_seq_length, embedding_dim):
        super(LearnablePositionalEncoding, self).__init__()
        self.positional_encoding = nn.Parameter(torch.zeros(max_seq_length, embedding_dim))
    
    def forward(self, x):
        batch_size, seq_length, _ = x.size()
        return x + self.positional_encoding[:seq_length]


max_seq_length = 20
learning_rate = 0.001
model = LearnablePositionalEncoding(max_seq_length, embedding_dim)
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

num_epochs = 50
for epoch in range(num_epochs):
    for batch in dataloader:
        optimizer.zero_grad()
        output = model(batch)
        
        # Your loss calculation and backpropagation here
        # For demonstration purposes, let's say the loss is the mean squared error
        loss = nn.MSELoss()(output, batch)
        loss.backward()
        optimizer.step()
    
    print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}")
