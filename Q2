# Can you design a learnable positional encoding method using pytorch? (Create dummy dataset)

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset

class DummyDataset(Dataset):
    def __init__(self, num_samples, sequence_length, num_features):
        self.data = torch.randn(num_samples, sequence_length, num_features)
        self.targets = torch.randint(0, 2, (num_samples,))
        
    def __len__(self):
        return len(self.data)
    
    def __getitem__(self, idx):
        return self.data[idx], self.targets[idx]
    
num_samples = 1000
sequence_length = 10
num_features = 8
batch_size = 32
dataset = DummyDataset(num_samples, sequence_length, num_features)
dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)

class PositionalEncodingModel(nn.Module):
    def __init__(self, sequence_length, num_features, num_classes, hidden_size, num_layers):
        super(PositionalEncodingModel, self).__init__()
        self.embedding = nn.Linear(num_features, hidden_size)
        self.positional_encoding = nn.Parameter(torch.randn(sequence_length, hidden_size))
        self.rnn = nn.LSTM(hidden_size, hidden_size, num_layers, batch_first=True)
        self.fc = nn.Linear(hidden_size, num_classes)
        
    def forward(self, x):
        x = self.embedding(x)
        x = x + self.positional_encoding.unsqueeze(0)
        x, _ = self.rnn(x)
        x = x[:, -1, :]
        x = self.fc(x)
        return x

num_classes = 2
hidden_size = 16
num_layers = 2

learning_rate = 0.001

model = PositionalEncodingModel(sequence_length, num_features, num_classes, hidden_size, num_layers)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)


num_epochs = 100
for epoch in range(num_epochs):
    total_loss = 0.0
    for batch_data, batch_targets in dataloader:
        optimizer.zero_grad()
        outputs = model(batch_data)
        loss = criterion(outputs, batch_targets)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
    
    print(f"Epoch {epoch+1}/{num_epochs}, Loss: {total_loss:.3f}")
